name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Build
      run: go build -v ./...
    
    - name: Run tests
      run: go test -race -covermode=atomic -coverprofile=coverage.out -v ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Validate plugin structure
      run: |
        # Check required files
        test -f .traefik.yml || (echo "Missing .traefik.yml" && exit 1)
        test -f go.mod || (echo "Missing go.mod" && exit 1)
        test -f README.md || (echo "Missing README.md" && exit 1)
        
        # Validate .traefik.yml structure
        grep -q "displayName:" .traefik.yml || (echo "Missing displayName" && exit 1)
        grep -q "type: middleware" .traefik.yml || (echo "Missing type" && exit 1)
        grep -q "import:" .traefik.yml || (echo "Missing import" && exit 1)
        grep -q "testData:" .traefik.yml || (echo "Missing testData" && exit 1)
        
        echo "âœ… Plugin structure validation passed"

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq bc
    
    - name: Start test environment
      run: |
        cd examples
        docker-compose up -d
        sleep 10  # Wait for services to start
    
    - name: Run integration tests
      run: |
        chmod +x examples/test.sh
        BASE_URL=http://localhost ENDPOINT=/json ./examples/test.sh
    
    - name: Stop test environment
      run: |
        cd examples
        docker-compose down

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  release:
    if: github.event_name == 'release'
    needs: [test, lint, validate, integration-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Validate release
      run: |
        echo "Validating release ${{ github.event.release.tag_name }}"
        
        # Run all tests one more time
        go test -v ./...
        
        # Validate plugin structure
        make validate
        
        echo "âœ… Release validation passed"
    
    - name: Create release notes
      run: |
        echo "## ðŸŽ‰ Traefik Conditional Meta Plugin ${{ github.event.release.tag_name }}" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Features" >> release_notes.md
        echo "- âœ… Conditionally adds JSON metadata to responses" >> release_notes.md
        echo "- âœ… Configurable query parameters and metadata" >> release_notes.md
        echo "- âœ… JSON-only processing with Content-Type validation" >> release_notes.md
        echo "- âœ… Comprehensive test coverage" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "\`\`\`yaml" >> release_notes.md
        echo "experimental:" >> release_notes.md
        echo "  plugins:" >> release_notes.md
        echo "    conditional-meta:" >> release_notes.md
        echo "      moduleName: \"github.com/carlos/traefik-conditional-meta-plugin\"" >> release_notes.md
        echo "      version: \"${{ github.event.release.tag_name }}\"" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Update release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const release_notes = fs.readFileSync('release_notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: release_notes
          });
